/* The following code was generated by JFlex 1.6.0 */

// Alloy Analyzer 4 -- Copyright (c) 2006-2008, Felix Chang
// Electrum -- Copiright (c) 2015-present, Nuno Macedo
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify,
// merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
// OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package edu.mit.csail.sdg.alloy4compiler.parser;

import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Version;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprVar;
import java.util.List;
import java_cup.runtime.*;

/** Autogenerated by JFlex 1.4.1 */

//@modified: nmm


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>Alloy.lex</tt>
 */
public final class CompLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\75\1\76\1\66\1\67\1\70\1\66\16\75\4\0\1\76\1\2"+
    "\1\64\1\3\1\72\1\0\1\4\1\1\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\14\1\15\12\73\1\16\1\0\1\17\1\20\1\13"+
    "\1\0\1\21\10\72\1\60\11\72\1\63\7\72\1\22\1\65\1\23"+
    "\1\24\1\72\1\0\1\31\1\32\1\36\1\53\1\43\1\42\1\62"+
    "\1\47\1\50\1\55\1\54\1\37\1\56\1\45\1\51\1\52\1\61"+
    "\1\35\1\33\1\34\1\46\1\44\1\40\1\57\1\41\1\72\1\25"+
    "\1\26\1\27\1\30\6\75\1\71\32\75\2\0\4\74\4\0\1\74"+
    "\2\0\1\75\7\0\1\74\4\0\1\74\5\0\27\74\1\0\37\74"+
    "\1\0\u01ca\74\4\0\14\74\16\0\5\74\7\0\1\74\1\0\1\74"+
    "\21\0\160\75\5\74\1\0\2\74\2\0\4\74\10\0\1\74\1\0"+
    "\3\74\1\0\1\74\1\0\24\74\1\0\123\74\1\0\213\74\1\0"+
    "\5\75\2\0\236\74\11\0\46\74\2\0\1\74\7\0\47\74\7\0"+
    "\1\74\1\0\55\75\1\0\1\75\1\0\2\75\1\0\2\75\1\0"+
    "\1\75\10\0\33\74\5\0\3\74\15\0\5\75\6\0\1\74\4\0"+
    "\13\75\5\0\53\74\37\75\4\0\2\74\1\75\143\74\1\0\1\74"+
    "\10\75\1\0\6\75\2\74\2\75\1\0\4\75\2\74\12\75\3\74"+
    "\2\0\1\74\17\0\1\75\1\74\1\75\36\74\33\75\2\0\131\74"+
    "\13\75\1\74\16\0\12\75\41\74\11\75\2\74\4\0\1\74\5\0"+
    "\26\74\4\75\1\74\11\75\1\74\3\75\1\74\5\75\22\0\31\74"+
    "\3\75\104\0\1\74\1\0\13\74\67\0\33\75\1\0\4\75\66\74"+
    "\3\75\1\74\22\75\1\74\7\75\12\74\2\75\2\0\12\75\1\0"+
    "\7\74\1\0\7\74\1\0\3\75\1\0\10\74\2\0\2\74\2\0"+
    "\26\74\1\0\7\74\1\0\1\74\3\0\4\74\2\0\1\75\1\74"+
    "\7\75\2\0\2\75\2\0\3\75\1\74\10\0\1\75\4\0\2\74"+
    "\1\0\3\74\2\75\2\0\12\75\4\74\7\0\1\74\5\0\3\75"+
    "\1\0\6\74\4\0\2\74\2\0\26\74\1\0\7\74\1\0\2\74"+
    "\1\0\2\74\1\0\2\74\2\0\1\75\1\0\5\75\4\0\2\75"+
    "\2\0\3\75\3\0\1\75\7\0\4\74\1\0\1\74\7\0\14\75"+
    "\3\74\1\75\13\0\3\75\1\0\11\74\1\0\3\74\1\0\26\74"+
    "\1\0\7\74\1\0\2\74\1\0\5\74\2\0\1\75\1\74\10\75"+
    "\1\0\3\75\1\0\3\75\2\0\1\74\17\0\2\74\2\75\2\0"+
    "\12\75\1\0\1\74\17\0\3\75\1\0\10\74\2\0\2\74\2\0"+
    "\26\74\1\0\7\74\1\0\2\74\1\0\5\74\2\0\1\75\1\74"+
    "\7\75\2\0\2\75\2\0\3\75\10\0\2\75\4\0\2\74\1\0"+
    "\3\74\2\75\2\0\12\75\1\0\1\74\20\0\1\75\1\74\1\0"+
    "\6\74\3\0\3\74\1\0\4\74\3\0\2\74\1\0\1\74\1\0"+
    "\2\74\3\0\2\74\3\0\3\74\3\0\14\74\4\0\5\75\3\0"+
    "\3\75\1\0\4\75\2\0\1\74\6\0\1\75\16\0\12\75\11\0"+
    "\1\74\7\0\3\75\1\0\10\74\1\0\3\74\1\0\27\74\1\0"+
    "\12\74\1\0\5\74\3\0\1\74\7\75\1\0\3\75\1\0\4\75"+
    "\7\0\2\75\1\0\2\74\6\0\2\74\2\75\2\0\12\75\22\0"+
    "\2\75\1\0\10\74\1\0\3\74\1\0\27\74\1\0\12\74\1\0"+
    "\5\74\2\0\1\75\1\74\7\75\1\0\3\75\1\0\4\75\7\0"+
    "\2\75\7\0\1\74\1\0\2\74\2\75\2\0\12\75\1\0\2\74"+
    "\17\0\2\75\1\0\10\74\1\0\3\74\1\0\51\74\2\0\1\74"+
    "\7\75\1\0\3\75\1\0\4\75\1\74\10\0\1\75\10\0\2\74"+
    "\2\75\2\0\12\75\12\0\6\74\2\0\2\75\1\0\22\74\3\0"+
    "\30\74\1\0\11\74\1\0\1\74\2\0\7\74\3\0\1\75\4\0"+
    "\6\75\1\0\1\75\1\0\10\75\22\0\2\75\15\0\60\74\1\75"+
    "\2\74\7\75\4\0\10\74\10\75\1\0\12\75\47\0\2\74\1\0"+
    "\1\74\2\0\2\74\1\0\1\74\2\0\1\74\6\0\4\74\1\0"+
    "\7\74\1\0\3\74\1\0\1\74\1\0\1\74\2\0\2\74\1\0"+
    "\4\74\1\75\2\74\6\75\1\0\2\75\1\74\2\0\5\74\1\0"+
    "\1\74\1\0\6\75\2\0\12\75\2\0\4\74\40\0\1\74\27\0"+
    "\2\75\6\0\12\75\13\0\1\75\1\0\1\75\1\0\1\75\4\0"+
    "\2\75\10\74\1\0\44\74\4\0\24\75\1\0\2\75\5\74\13\75"+
    "\1\0\44\75\11\0\1\75\71\0\53\74\24\75\1\74\12\75\6\0"+
    "\6\74\4\75\4\74\3\75\1\74\3\75\2\74\7\75\3\74\4\75"+
    "\15\74\14\75\1\74\17\75\2\0\46\74\1\0\1\74\5\0\1\74"+
    "\2\0\53\74\1\0\u014d\74\1\0\4\74\2\0\7\74\1\0\1\74"+
    "\1\0\4\74\2\0\51\74\1\0\4\74\2\0\41\74\1\0\4\74"+
    "\2\0\7\74\1\0\1\74\1\0\4\74\2\0\17\74\1\0\71\74"+
    "\1\0\4\74\2\0\103\74\2\0\3\75\40\0\20\74\20\0\125\74"+
    "\14\0\u026c\74\2\0\21\74\1\0\32\74\5\0\113\74\3\0\3\74"+
    "\17\0\15\74\1\0\4\74\3\75\13\0\22\74\3\75\13\0\22\74"+
    "\2\75\14\0\15\74\1\0\3\74\1\0\2\75\14\0\64\74\40\75"+
    "\3\0\1\74\3\0\2\74\1\75\2\0\12\75\41\0\3\75\2\0"+
    "\12\75\6\0\130\74\10\0\51\74\1\75\1\74\5\0\106\74\12\0"+
    "\35\74\3\0\14\75\4\0\14\75\12\0\12\75\36\74\2\0\5\74"+
    "\13\0\54\74\4\0\21\75\7\74\2\75\6\0\12\75\46\0\27\74"+
    "\5\75\4\0\65\74\12\75\1\0\35\75\2\0\13\75\6\0\12\75"+
    "\15\0\1\74\130\0\5\75\57\74\21\75\7\74\4\0\12\75\21\0"+
    "\11\75\14\0\3\75\36\74\15\75\2\74\12\75\54\74\16\75\14\0"+
    "\44\74\24\75\10\0\12\75\3\0\3\74\12\75\44\74\122\0\3\75"+
    "\1\0\25\75\4\74\1\75\4\74\3\75\2\74\11\0\300\74\47\75"+
    "\25\0\4\75\u0116\74\2\0\6\74\2\0\46\74\2\0\6\74\2\0"+
    "\10\74\1\0\1\74\1\0\1\74\1\0\1\74\1\0\37\74\2\0"+
    "\65\74\1\0\7\74\1\0\1\74\3\0\3\74\1\0\7\74\3\0"+
    "\4\74\2\0\6\74\4\0\15\74\5\0\3\74\1\0\7\74\16\0"+
    "\5\75\30\0\1\67\1\67\5\75\20\0\2\74\23\0\1\74\13\0"+
    "\5\75\5\0\6\75\1\0\1\74\15\0\1\74\20\0\15\74\3\0"+
    "\33\74\25\0\15\75\4\0\1\75\3\0\14\75\21\0\1\74\4\0"+
    "\1\74\2\0\12\74\1\0\1\74\3\0\5\74\6\0\1\74\1\0"+
    "\1\74\1\0\1\74\1\0\4\74\1\0\13\74\2\0\4\74\5\0"+
    "\5\74\4\0\1\74\21\0\51\74\u0a77\0\57\74\1\0\57\74\1\0"+
    "\205\74\6\0\4\74\3\75\2\74\14\0\46\74\1\0\1\74\5\0"+
    "\1\74\2\0\70\74\7\0\1\74\17\0\1\75\27\74\11\0\7\74"+
    "\1\0\7\74\1\0\7\74\1\0\7\74\1\0\7\74\1\0\7\74"+
    "\1\0\7\74\1\0\7\74\1\0\40\75\57\0\1\74\u01d5\0\3\74"+
    "\31\0\11\74\6\75\1\0\5\74\2\0\5\74\4\0\126\74\2\0"+
    "\2\75\2\0\3\74\1\0\132\74\1\0\4\74\5\0\51\74\3\0"+
    "\136\74\21\0\33\74\65\0\20\74\u0200\0\u19b6\74\112\0\u51cd\74\63\0"+
    "\u048d\74\103\0\56\74\2\0\u010d\74\3\0\20\74\12\75\2\74\24\0"+
    "\57\74\1\75\4\0\12\75\1\0\31\74\7\0\1\75\120\74\2\75"+
    "\45\0\11\74\2\0\147\74\2\0\4\74\1\0\4\74\14\0\13\74"+
    "\115\0\12\74\1\75\3\74\1\75\4\74\1\75\27\74\5\75\20\0"+
    "\1\74\7\0\64\74\14\0\2\75\62\74\21\75\13\0\12\75\6\0"+
    "\22\75\6\74\3\0\1\74\4\0\12\75\34\74\10\75\2\0\27\74"+
    "\15\75\14\0\35\74\3\0\4\75\57\74\16\75\16\0\1\74\12\75"+
    "\46\0\51\74\16\75\11\0\3\74\1\75\10\74\2\75\2\0\12\75"+
    "\6\0\27\74\3\0\1\74\1\75\4\0\60\74\1\75\1\74\3\75"+
    "\2\74\2\75\5\74\2\75\1\74\1\75\1\74\30\0\3\74\2\0"+
    "\13\74\5\75\2\0\3\74\2\75\12\0\6\74\2\0\6\74\2\0"+
    "\6\74\11\0\7\74\1\0\7\74\221\0\43\74\10\75\1\0\2\75"+
    "\2\0\12\75\6\0\u2ba4\74\14\0\27\74\4\0\61\74\u2104\0\u016e\74"+
    "\2\0\152\74\46\0\7\74\14\0\5\74\5\0\1\74\1\75\12\74"+
    "\1\0\15\74\1\0\5\74\1\0\1\74\1\0\2\74\1\0\2\74"+
    "\1\0\154\74\41\0\u016b\74\22\0\100\74\2\0\66\74\50\0\15\74"+
    "\3\0\20\75\20\0\7\75\14\0\2\74\30\0\3\74\31\0\1\74"+
    "\6\0\5\74\1\0\207\74\2\0\1\75\4\0\1\74\13\0\12\75"+
    "\7\0\32\74\4\0\1\74\1\0\32\74\13\0\131\74\3\0\6\74"+
    "\2\0\6\74\2\0\6\74\2\0\3\74\3\0\2\74\3\0\2\74"+
    "\22\0\3\75\4\0\14\74\1\0\32\74\1\0\23\74\1\0\2\74"+
    "\1\0\17\74\2\0\16\74\42\0\173\74\105\0\65\74\210\0\1\75"+
    "\202\0\35\74\3\0\61\74\57\0\37\74\21\0\33\74\65\0\36\74"+
    "\2\0\44\74\4\0\10\74\1\0\5\74\52\0\236\74\2\0\12\75"+
    "\u0356\0\6\74\2\0\1\74\1\0\54\74\1\0\2\74\3\0\1\74"+
    "\2\0\27\74\252\0\26\74\12\0\32\74\106\0\70\74\6\0\2\74"+
    "\100\0\1\74\3\75\1\0\2\75\5\0\4\75\4\74\1\0\3\74"+
    "\1\0\33\74\4\0\3\75\4\0\1\75\40\0\35\74\203\0\66\74"+
    "\12\0\26\74\12\0\23\74\215\0\111\74\u03b7\0\3\75\65\74\17\75"+
    "\37\0\12\75\20\0\3\75\55\74\13\75\2\0\1\75\22\0\31\74"+
    "\7\0\12\75\6\0\3\75\44\74\16\75\1\0\12\75\100\0\3\75"+
    "\60\74\16\75\4\74\13\0\12\75\u04a6\0\53\74\15\75\10\0\12\75"+
    "\u0936\0\u036f\74\221\0\143\74\u0b9d\0\u042f\74\u33d1\0\u0239\74\u04c7\0\105\74"+
    "\13\0\1\74\56\75\20\0\4\75\15\74\u4060\0\2\74\u2163\0\5\75"+
    "\3\0\26\75\2\0\7\75\36\0\4\75\224\0\3\75\u01bb\0\125\74"+
    "\1\0\107\74\1\0\2\74\2\0\1\74\2\0\2\74\2\0\4\74"+
    "\1\0\14\74\1\0\1\74\1\0\7\74\1\0\101\74\1\0\4\74"+
    "\2\0\10\74\1\0\7\74\1\0\34\74\1\0\4\74\1\0\5\74"+
    "\1\0\1\74\3\0\7\74\1\0\u0154\74\2\0\31\74\1\0\31\74"+
    "\1\0\37\74\1\0\31\74\1\0\37\74\1\0\31\74\1\0\37\74"+
    "\1\0\31\74\1\0\37\74\1\0\31\74\1\0\10\74\2\0\62\75"+
    "\u1600\0\4\74\1\0\33\74\1\0\2\74\1\0\1\74\2\0\1\74"+
    "\1\0\12\74\1\0\4\74\1\0\1\74\1\0\1\74\6\0\1\74"+
    "\4\0\1\74\1\0\1\74\1\0\1\74\1\0\3\74\1\0\2\74"+
    "\1\0\1\74\2\0\1\74\1\0\1\74\1\0\1\74\1\0\1\74"+
    "\1\0\1\74\1\0\2\74\1\0\1\74\2\0\4\74\1\0\7\74"+
    "\1\0\4\74\1\0\4\74\1\0\1\74\1\0\12\74\1\0\21\74"+
    "\5\0\3\74\1\0\5\74\1\0\21\74\u1144\0\ua6d7\74\51\0\u1035\74"+
    "\13\0\336\74\u3fe2\0\u021e\74\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\75\36\0\140\75\200\0\360\75\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\25\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\34\1\40\1\41\1\42\1\0\1\43\1\44\1\45"+
    "\1\46\1\47\1\46\1\50\1\32\1\51\26\32\1\52"+
    "\3\32\1\53\2\32\1\50\10\32\1\54\1\0\1\55"+
    "\1\56\2\0\1\57\2\32\1\60\2\32\1\36\1\61"+
    "\1\62\1\63\1\64\1\32\1\65\3\32\1\66\1\32"+
    "\1\67\2\32\1\70\1\71\5\32\1\72\1\32\1\73"+
    "\1\3\4\32\1\57\1\74\3\32\1\75\6\32\1\76"+
    "\1\32\1\77\1\0\1\34\5\32\1\100\1\101\2\32"+
    "\1\102\1\103\1\104\1\32\1\105\4\32\1\106\1\32"+
    "\1\107\1\32\1\110\1\32\1\111\1\112\1\113\1\32"+
    "\1\114\1\32\1\115\5\32\1\116\1\117\1\32\1\120"+
    "\5\32\1\121\11\32\1\122\1\123\5\32\1\124\6\32"+
    "\1\125\1\126\1\32\1\127\1\32\1\130\1\131\2\32"+
    "\1\47\2\32\1\132\1\32\1\133\4\32\1\134\1\115"+
    "\3\32\1\113\1\135\1\72\2\32\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\77\0\77\0\77\0\176\0\77\0\77"+
    "\0\77\0\275\0\77\0\374\0\u013b\0\77\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\77\0\77\0\77\0\77\0\77\0\u0276"+
    "\0\77\0\77\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1\0\u03f0"+
    "\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8"+
    "\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0"+
    "\0\77\0\u081f\0\77\0\77\0\u085e\0\77\0\u089d\0\77"+
    "\0\u08dc\0\77\0\77\0\77\0\u091b\0\77\0\77\0\77"+
    "\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13"+
    "\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b"+
    "\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03"+
    "\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u046e"+
    "\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4"+
    "\0\u12f3\0\u1332\0\u1371\0\77\0\u13b0\0\u13ef\0\77\0\u142e"+
    "\0\u146d\0\u046e\0\u14ac\0\u14eb\0\u046e\0\u046e\0\u046e\0\u046e"+
    "\0\u046e\0\u152a\0\u046e\0\u1569\0\u15a8\0\u15e7\0\u046e\0\u1626"+
    "\0\u046e\0\u1665\0\u16a4\0\u046e\0\u046e\0\u16e3\0\u1722\0\u1761"+
    "\0\u17a0\0\u17df\0\u181e\0\u185d\0\u046e\0\u046e\0\u189c\0\u18db"+
    "\0\u191a\0\u1959\0\u046e\0\u046e\0\u1998\0\u19d7\0\u1a16\0\u046e"+
    "\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u046e\0\u1bcf"+
    "\0\u12f3\0\u1c0e\0\u13b0\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49"+
    "\0\u046e\0\u046e\0\u1d88\0\u1dc7\0\u046e\0\u046e\0\u046e\0\u1e06"+
    "\0\u046e\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u046e\0\u1f41\0\u046e"+
    "\0\u1f80\0\u046e\0\u1fbf\0\u046e\0\u046e\0\u1ffe\0\u203d\0\u046e"+
    "\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u046e"+
    "\0\u046e\0\u2235\0\u046e\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370"+
    "\0\u046e\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529"+
    "\0\u2568\0\u25a7\0\u046e\0\u046e\0\u25e6\0\u2625\0\u2664\0\u26a3"+
    "\0\u26e2\0\u046e\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c"+
    "\0\u046e\0\u046e\0\u289b\0\u046e\0\u28da\0\u046e\0\u046e\0\u2919"+
    "\0\u2958\0\u046e\0\u2997\0\u29d6\0\u046e\0\u2a15\0\u046e\0\u2a54"+
    "\0\u2a93\0\u2ad2\0\u2b11\0\u046e\0\u046e\0\u2b50\0\u2b8f\0\u2bce"+
    "\0\u046e\0\u046e\0\u046e\0\u2c0d\0\u2c4c\0\u046e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\2\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\2\42\1\55\1\42\1\56\2\42"+
    "\1\57\1\60\1\2\1\61\1\0\1\61\1\0\1\42"+
    "\1\62\1\42\1\2\1\61\103\0\1\63\102\0\1\64"+
    "\100\0\1\65\1\66\76\0\1\67\4\0\1\70\65\0"+
    "\1\71\5\0\1\65\74\0\1\72\2\0\1\16\76\0"+
    "\1\73\1\74\1\75\71\0\1\76\3\0\1\77\105\0"+
    "\1\100\101\0\1\42\1\101\1\102\3\42\1\103\2\42"+
    "\1\104\2\42\1\105\17\42\4\0\5\42\32\0\15\42"+
    "\1\106\16\42\4\0\5\42\32\0\12\42\1\107\2\42"+
    "\1\110\1\42\1\111\1\112\13\42\4\0\5\42\32\0"+
    "\16\42\1\113\15\42\4\0\5\42\32\0\12\42\1\114"+
    "\2\42\1\115\16\42\4\0\5\42\32\0\16\42\1\116"+
    "\15\42\4\0\5\42\32\0\12\42\1\117\5\42\1\120"+
    "\13\42\4\0\5\42\32\0\34\42\4\0\5\42\32\0"+
    "\1\121\14\42\1\122\2\42\1\123\13\42\4\0\5\42"+
    "\32\0\6\42\1\124\4\42\1\125\1\126\11\42\1\127"+
    "\5\42\4\0\5\42\32\0\1\130\33\42\4\0\5\42"+
    "\32\0\20\42\1\131\13\42\4\0\5\42\32\0\14\42"+
    "\1\132\17\42\4\0\5\42\32\0\17\42\1\133\14\42"+
    "\4\0\5\42\32\0\11\42\1\134\2\42\1\135\5\42"+
    "\1\136\2\42\1\137\6\42\4\0\5\42\32\0\4\42"+
    "\1\140\7\42\1\141\4\42\1\142\12\42\4\0\5\42"+
    "\32\0\1\143\3\42\1\144\27\42\4\0\5\42\32\0"+
    "\17\42\1\145\14\42\4\0\5\42\32\0\20\42\1\146"+
    "\13\42\4\0\5\42\32\0\14\42\1\147\17\42\4\0"+
    "\5\42\32\0\3\42\1\150\30\42\4\0\5\42\1\0"+
    "\64\60\1\151\1\152\11\60\31\0\34\153\5\0\1\153"+
    "\1\62\3\0\66\65\1\61\10\65\13\0\1\154\63\0"+
    "\7\155\1\156\67\155\13\0\1\157\114\0\2\42\1\160"+
    "\31\42\4\0\5\42\32\0\2\42\1\161\31\42\4\0"+
    "\5\42\32\0\6\42\1\162\1\163\24\42\4\0\5\42"+
    "\32\0\3\42\1\164\30\42\4\0\5\42\32\0\22\42"+
    "\1\165\11\42\4\0\5\42\32\0\3\42\1\166\30\42"+
    "\4\0\5\42\32\0\3\42\1\167\24\42\1\170\3\42"+
    "\4\0\5\42\32\0\25\42\1\171\6\42\4\0\5\42"+
    "\32\0\14\42\1\172\14\42\1\173\2\42\4\0\5\42"+
    "\32\0\25\42\1\174\6\42\4\0\5\42\32\0\17\42"+
    "\1\175\14\42\4\0\5\42\32\0\6\42\1\176\25\42"+
    "\4\0\5\42\32\0\14\42\1\177\17\42\4\0\5\42"+
    "\32\0\12\42\1\200\21\42\4\0\5\42\32\0\3\42"+
    "\1\201\30\42\4\0\5\42\32\0\14\42\1\202\17\42"+
    "\4\0\5\42\32\0\5\42\1\203\26\42\4\0\5\42"+
    "\32\0\14\42\1\204\17\42\4\0\5\42\32\0\4\42"+
    "\1\205\27\42\4\0\5\42\32\0\2\42\1\206\31\42"+
    "\4\0\5\42\32\0\12\42\1\207\21\42\4\0\5\42"+
    "\32\0\15\42\1\210\16\42\4\0\5\42\32\0\1\211"+
    "\2\42\1\212\12\42\1\213\2\42\1\214\12\42\4\0"+
    "\5\42\32\0\4\42\1\215\27\42\4\0\5\42\32\0"+
    "\3\42\1\216\10\42\1\217\17\42\4\0\5\42\32\0"+
    "\3\42\1\220\13\42\1\221\14\42\4\0\5\42\32\0"+
    "\2\42\1\222\31\42\4\0\5\42\32\0\11\42\1\223"+
    "\22\42\4\0\5\42\32\0\3\42\1\224\30\42\4\0"+
    "\5\42\32\0\12\42\1\225\21\42\4\0\5\42\32\0"+
    "\21\42\1\226\12\42\4\0\5\42\32\0\5\42\1\227"+
    "\4\42\1\230\21\42\4\0\5\42\32\0\12\42\1\231"+
    "\21\42\4\0\5\42\32\0\4\42\1\232\27\42\4\0"+
    "\5\42\32\0\12\42\1\233\4\42\1\234\14\42\4\0"+
    "\5\42\32\0\2\42\1\235\31\42\4\0\5\42\32\0"+
    "\22\42\1\236\11\42\4\0\5\42\32\0\3\42\1\237"+
    "\30\42\4\0\5\42\32\0\4\42\1\240\27\42\4\0"+
    "\5\42\32\0\34\241\5\0\2\241\3\0\66\60\4\0"+
    "\5\60\31\0\34\153\5\0\2\153\3\0\7\155\1\242"+
    "\76\155\1\242\5\155\1\243\61\155\31\0\3\42\1\244"+
    "\30\42\4\0\5\42\32\0\12\42\1\245\21\42\4\0"+
    "\5\42\32\0\1\246\33\42\4\0\5\42\32\0\12\42"+
    "\1\247\21\42\4\0\5\42\32\0\5\42\1\250\26\42"+
    "\4\0\5\42\32\0\12\42\1\251\21\42\4\0\5\42"+
    "\32\0\2\42\1\252\31\42\4\0\5\42\32\0\12\42"+
    "\1\253\21\42\4\0\5\42\32\0\5\42\1\254\26\42"+
    "\4\0\5\42\32\0\12\42\1\255\21\42\4\0\5\42"+
    "\32\0\3\42\1\256\30\42\4\0\5\42\32\0\12\42"+
    "\1\257\21\42\4\0\5\42\32\0\14\42\1\260\17\42"+
    "\4\0\5\42\32\0\25\42\1\261\6\42\4\0\5\42"+
    "\32\0\5\42\1\262\26\42\4\0\5\42\32\0\12\42"+
    "\1\263\21\42\4\0\5\42\32\0\1\264\33\42\4\0"+
    "\5\42\32\0\12\42\1\265\21\42\4\0\5\42\32\0"+
    "\12\42\1\266\21\42\4\0\5\42\32\0\17\42\1\267"+
    "\14\42\4\0\5\42\32\0\13\42\1\270\20\42\4\0"+
    "\5\42\32\0\3\42\1\271\30\42\4\0\5\42\32\0"+
    "\14\42\1\272\17\42\4\0\5\42\32\0\6\42\1\273"+
    "\25\42\4\0\5\42\32\0\12\42\1\274\21\42\4\0"+
    "\5\42\32\0\14\42\1\275\17\42\4\0\5\42\32\0"+
    "\3\42\1\276\30\42\4\0\5\42\32\0\13\42\1\277"+
    "\6\42\1\300\11\42\4\0\5\42\32\0\13\42\1\301"+
    "\20\42\4\0\5\42\32\0\24\42\1\302\7\42\4\0"+
    "\5\42\32\0\15\42\1\303\16\42\4\0\5\42\32\0"+
    "\17\42\1\304\14\42\4\0\5\42\1\0\7\155\1\242"+
    "\5\155\1\61\61\155\31\0\4\42\1\305\27\42\4\0"+
    "\5\42\32\0\4\42\1\306\27\42\4\0\5\42\32\0"+
    "\10\42\1\307\23\42\4\0\5\42\32\0\4\42\1\310"+
    "\27\42\4\0\5\42\32\0\12\42\1\311\21\42\4\0"+
    "\5\42\32\0\1\312\33\42\4\0\5\42\32\0\23\42"+
    "\1\313\10\42\4\0\5\42\32\0\3\42\1\314\30\42"+
    "\4\0\5\42\32\0\3\42\1\315\30\42\4\0\5\42"+
    "\32\0\14\42\1\316\17\42\4\0\5\42\32\0\15\42"+
    "\1\317\16\42\4\0\5\42\32\0\5\42\1\320\26\42"+
    "\4\0\5\42\32\0\6\42\1\321\25\42\4\0\5\42"+
    "\32\0\20\42\1\322\13\42\4\0\5\42\32\0\17\42"+
    "\1\323\14\42\4\0\5\42\32\0\17\42\1\324\14\42"+
    "\4\0\5\42\32\0\17\42\1\325\14\42\4\0\5\42"+
    "\32\0\1\326\33\42\4\0\5\42\32\0\20\42\1\327"+
    "\13\42\4\0\5\42\32\0\6\42\1\330\25\42\4\0"+
    "\5\42\32\0\14\42\1\331\17\42\4\0\5\42\32\0"+
    "\1\332\33\42\4\0\5\42\32\0\3\42\1\333\30\42"+
    "\4\0\5\42\32\0\2\42\1\334\31\42\4\0\5\42"+
    "\32\0\2\42\1\335\31\42\4\0\5\42\32\0\15\42"+
    "\1\336\16\42\4\0\5\42\32\0\6\42\1\337\25\42"+
    "\4\0\5\42\32\0\22\42\1\340\11\42\4\0\5\42"+
    "\32\0\2\42\1\341\31\42\4\0\5\42\32\0\3\42"+
    "\1\342\30\42\4\0\5\42\32\0\4\42\1\343\27\42"+
    "\4\0\5\42\32\0\12\42\1\344\21\42\4\0\5\42"+
    "\32\0\3\42\1\345\30\42\4\0\5\42\32\0\20\42"+
    "\1\346\13\42\4\0\5\42\32\0\3\42\1\347\30\42"+
    "\4\0\5\42\32\0\17\42\1\350\14\42\4\0\5\42"+
    "\32\0\12\42\1\351\21\42\4\0\5\42\32\0\31\42"+
    "\1\352\2\42\4\0\5\42\32\0\5\42\1\353\26\42"+
    "\4\0\5\42\32\0\12\42\1\354\21\42\4\0\5\42"+
    "\32\0\1\355\33\42\4\0\5\42\32\0\10\42\1\356"+
    "\23\42\4\0\5\42\32\0\2\42\1\357\31\42\4\0"+
    "\5\42\32\0\3\42\1\360\30\42\4\0\5\42\32\0"+
    "\17\42\1\361\14\42\4\0\5\42\32\0\2\42\1\362"+
    "\31\42\4\0\5\42\32\0\17\42\1\363\14\42\4\0"+
    "\5\42\32\0\15\42\1\364\16\42\4\0\5\42\32\0"+
    "\12\42\1\365\21\42\4\0\5\42\32\0\14\42\1\366"+
    "\17\42\4\0\5\42\32\0\3\42\1\367\30\42\4\0"+
    "\5\42\32\0\6\42\1\370\25\42\4\0\5\42\32\0"+
    "\17\42\1\371\14\42\4\0\5\42\32\0\5\42\1\372"+
    "\26\42\4\0\5\42\32\0\20\42\1\373\13\42\4\0"+
    "\5\42\32\0\2\42\1\374\31\42\4\0\5\42\32\0"+
    "\3\42\1\375\30\42\4\0\5\42\32\0\6\42\1\376"+
    "\25\42\4\0\5\42\32\0\13\42\1\377\20\42\4\0"+
    "\5\42\32\0\1\u0100\33\42\4\0\5\42\32\0\14\42"+
    "\1\u0101\17\42\4\0\5\42\32\0\10\42\1\u0102\23\42"+
    "\4\0\5\42\32\0\12\42\1\u0103\21\42\4\0\5\42"+
    "\32\0\6\42\1\u0104\25\42\4\0\5\42\32\0\6\42"+
    "\1\u0105\25\42\4\0\5\42\32\0\10\42\1\u0106\23\42"+
    "\4\0\5\42\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11403];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\11\1\1\3\11\1\1\1\11\2\1\1\11"+
    "\4\1\5\11\1\1\2\11\26\1\1\11\1\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\0\3\11\1\1\3\11"+
    "\51\1\1\0\1\1\1\11\2\0\1\11\62\1\1\0"+
    "\144\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
 public String alloy_filename="";
 public int alloy_lineoffset=0; // If not zero, it is added to the current LINE NUMBER
 public List<Object> alloy_seenDollar;
 public CompModule alloy_module;
 private final Pos alloy_here(String txt) {
    return new Pos(alloy_filename,yycolumn+1,yyline+1+alloy_lineoffset,yycolumn+txt.length(),yyline+1);
 }
 private final Symbol alloy_sym(String txt, int type) {
    Pos p = alloy_here(txt); return new Symbol(type, p, p);
 }
 private final Symbol alloy_string(String txt) throws Err {
    Pos p = alloy_here(txt);
    if (!Version.experimental) throw new ErrorSyntax(p, "String literal is not currently supported.");
    StringBuilder sb = new StringBuilder(txt.length());
    for(int i=0; i<txt.length(); i++) {
       char c = txt.charAt(i);
       if (c=='\r' || c=='\n') throw new ErrorSyntax(p, "String literal cannot span multiple lines; use \\n instead.");
       if (c=='\\') {
          i++;
          if (i>=txt.length()) throw new ErrorSyntax(p, "String literal cannot end with a single \\");
          c = txt.charAt(i);
          if (c=='n') c='\n'; else if (c!='\"' && c!='\\') throw new ErrorSyntax(p, "String literal currenty only supports\nthree escape sequences: \\\\, \\n, and \\\""); // [HASLab]
       }
       sb.append(c);
    }
    txt = sb.toString();
    if (txt.length()==2) throw new ErrorSyntax(p, "Empty string is not allowed; try rewriting your model to use an empty set instead.");
    return new Symbol(CompSym.STR, p, ExprConstant.Op.STRING.make(p, txt));
 }
 private final Symbol alloy_id(String txt) throws Err {
    Pos p=alloy_here(txt);
    if (alloy_seenDollar.size()==0 && txt.indexOf('$')>=0) alloy_seenDollar.add(null);
    return new Symbol(CompSym.ID, p, ExprVar.make(p,txt));
 }
 private final Symbol alloy_num(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
       n=Integer.parseInt(txt);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The number "+txt+" is too large to be stored in a Java integer");
    }
    return new Symbol(CompSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CompLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2868) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
 * @throws Err 
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, Err {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new ErrorSyntax(alloy_here(" "), "Syntax error at the "+yytext()+" character.");
          }
        case 95: break;
        case 2: 
          { return alloy_sym(yytext(), CompSym.PRIME       );
          }
        case 96: break;
        case 3: 
          { return alloy_sym(yytext(), CompSym.NOT         );
          }
        case 97: break;
        case 4: 
          { return alloy_sym(yytext(), CompSym.HASH        );
          }
        case 98: break;
        case 5: 
          { return alloy_sym(yytext(), CompSym.AMPERSAND   );
          }
        case 99: break;
        case 6: 
          { return alloy_sym(yytext(), CompSym.LPAREN      );
          }
        case 100: break;
        case 7: 
          { return alloy_sym(yytext(), CompSym.RPAREN      );
          }
        case 101: break;
        case 8: 
          { return alloy_sym(yytext(), CompSym.STAR        );
          }
        case 102: break;
        case 9: 
          { return alloy_sym(yytext(), CompSym.PLUS        );
          }
        case 103: break;
        case 10: 
          { return alloy_sym(yytext(), CompSym.COMMA       );
          }
        case 104: break;
        case 11: 
          { return alloy_sym(yytext(), CompSym.MINUS       );
          }
        case 105: break;
        case 12: 
          { return alloy_sym(yytext(), CompSym.GT          );
          }
        case 106: break;
        case 13: 
          { return alloy_sym(yytext(), CompSym.DOT         );
          }
        case 107: break;
        case 14: 
          { return alloy_sym(yytext(), CompSym.SLASH       );
          }
        case 108: break;
        case 15: 
          { return alloy_sym(yytext(), CompSym.COLON       );
          }
        case 109: break;
        case 16: 
          { return alloy_sym(yytext(), CompSym.LT          );
          }
        case 110: break;
        case 17: 
          { return alloy_sym(yytext(), CompSym.EQUALS      );
          }
        case 111: break;
        case 18: 
          { return alloy_sym(yytext(), CompSym.AT          );
          }
        case 112: break;
        case 19: 
          { return alloy_sym(yytext(), CompSym.LBRACKET    );
          }
        case 113: break;
        case 20: 
          { return alloy_sym(yytext(), CompSym.RBRACKET    );
          }
        case 114: break;
        case 21: 
          { return alloy_sym(yytext(), CompSym.CARET       );
          }
        case 115: break;
        case 22: 
          { return alloy_sym(yytext(), CompSym.LBRACE      );
          }
        case 116: break;
        case 23: 
          { return alloy_sym(yytext(), CompSym.BAR         );
          }
        case 117: break;
        case 24: 
          { return alloy_sym(yytext(), CompSym.RBRACE      );
          }
        case 118: break;
        case 25: 
          { return alloy_sym(yytext(), CompSym.TILDE       );
          }
        case 119: break;
        case 26: 
          { return alloy_id  (yytext());
          }
        case 120: break;
        case 27: 
          { throw new ErrorSyntax(alloy_here(yytext()),"String literal is missing its closing \" character");
          }
        case 121: break;
        case 28: 
          { 
          }
        case 122: break;
        case 29: 
          { return alloy_num (yytext());
          }
        case 123: break;
        case 30: 
          { return alloy_sym(yytext(), CompSym.AND         );
          }
        case 124: break;
        case 31: 
          { return alloy_sym(yytext(), CompSym.PLUSPLUS    );
          }
        case 125: break;
        case 32: 
          { return alloy_sym(yytext(), CompSym.ARROW       );
          }
        case 126: break;
        case 33: 
          { return alloy_sym(yytext(), CompSym.SHA         );
          }
        case 127: break;
        case 34: 
          { return alloy_sym(yytext(), CompSym.GTE         );
          }
        case 128: break;
        case 35: 
          { return alloy_sym(yytext(), CompSym.RANGE       );
          }
        case 129: break;
        case 36: 
          { return alloy_sym(yytext(), CompSym.DOMAIN      );
          }
        case 130: break;
        case 37: 
          { return alloy_sym(yytext(), CompSym.SHL         );
          }
        case 131: break;
        case 38: 
          { return alloy_sym(yytext(), CompSym.LTE         );
          }
        case 132: break;
        case 39: 
          { return alloy_sym(yytext(), CompSym.IMPLIES     );
          }
        case 133: break;
        case 40: 
          { return alloy_sym(yytext(), CompSym.OR          );
          }
        case 134: break;
        case 41: 
          { return alloy_sym(yytext(), CompSym.AS          );
          }
        case 135: break;
        case 42: 
          { return alloy_sym(yytext(), CompSym.NO          );
          }
        case 136: break;
        case 43: 
          { return alloy_sym(yytext(), CompSym.IN          );
          }
        case 137: break;
        case 44: 
          { return alloy_string(yytext());
          }
        case 138: break;
        case 45: 
          { throw new ErrorSyntax(alloy_here(yytext()),"Name cannot start with a number.");
          }
        case 139: break;
        case 46: 
          { return alloy_sym(yytext(), CompSym.SHR         );
          }
        case 140: break;
        case 47: 
          { return alloy_sym(yytext(), CompSym.IFF         );
          }
        case 141: break;
        case 48: 
          { return alloy_sym(yytext(), CompSym.ALL         );
          }
        case 142: break;
        case 49: 
          { return alloy_sym(yytext(), CompSym.BUT         );
          }
        case 143: break;
        case 50: 
          { return alloy_sym(yytext(), CompSym.SET         );
          }
        case 144: break;
        case 51: 
          { return alloy_sym(yytext(), CompSym.SEQ         );
          }
        case 145: break;
        case 52: 
          { return alloy_sym(yytext(), CompSym.SUM         );
          }
        case 146: break;
        case 53: 
          { return alloy_sym(yytext(), CompSym.SIG         );
          }
        case 147: break;
        case 54: 
          { return alloy_sym(yytext(), CompSym.RUN         );
          }
        case 148: break;
        case 55: 
          { return alloy_sym(yytext(), CompSym.LET         );
          }
        case 149: break;
        case 56: 
          { return alloy_sym(yytext(), CompSym.FUN         );
          }
        case 150: break;
        case 57: 
          { return alloy_sym(yytext(), CompSym.FOR         );
          }
        case 151: break;
        case 58: 
          { return alloy_sym(yytext(), CompSym.EXH         );
          }
        case 152: break;
        case 59: 
          { return alloy_sym(yytext(), CompSym.VAR         );
          }
        case 153: break;
        case 60: 
          { return alloy_sym(yytext(), CompSym.INT         );
          }
        case 154: break;
        case 61: 
          { return alloy_sym(yytext(), CompSym.ONE         );
          }
        case 155: break;
        case 62: 
          { return alloy_sym(yytext(), CompSym.SIGINT      );
          }
        case 156: break;
        case 63: 
          { throw new ErrorSyntax(alloy_here(yytext()),"String literal cannot be followed by a legal identifier character.");
          }
        case 157: break;
        case 64: 
          { return alloy_sym(yytext(), CompSym.SOME        );
          }
        case 158: break;
        case 65: 
          { return alloy_sym(yytext(), CompSym.THIS        );
          }
        case 159: break;
        case 66: 
          { return alloy_sym(yytext(), CompSym.LONE        );
          }
        case 160: break;
        case 67: 
          { return alloy_sym(yytext(), CompSym.FACT        );
          }
        case 161: break;
        case 68: 
          { return alloy_sym(yytext(), CompSym.ELSE        );
          }
        case 162: break;
        case 69: 
          { return alloy_sym(yytext(), CompSym.ENUM        );
          }
        case 163: break;
        case 70: 
          { return alloy_sym(yytext(), CompSym.NONE        );
          }
        case 164: break;
        case 71: 
          { return alloy_sym(yytext(), CompSym.UNIV        );
          }
        case 165: break;
        case 72: 
          { return alloy_sym(yytext(), CompSym.IDEN        );
          }
        case 166: break;
        case 73: 
          { return alloy_sym(yytext(), CompSym.ONCE        );
          }
        case 167: break;
        case 74: 
          { return alloy_sym(yytext(), CompSym.OPEN        );
          }
        case 168: break;
        case 75: 
          { return alloy_sym(yytext(), CompSym.PART        );
          }
        case 169: break;
        case 76: 
          { return alloy_sym(yytext(), CompSym.PRED        );
          }
        case 170: break;
        case 77: 
          { return alloy_sym(yytext(), CompSym.DISJ        );
          }
        case 171: break;
        case 78: 
          { return alloy_sym(yytext(), CompSym.AFTER       );
          }
        case 172: break;
        case 79: 
          { return alloy_sym(yytext(), CompSym.SINCE       );
          }
        case 173: break;
        case 80: 
          { return alloy_sym(yytext(), CompSym.CHECK       );
          }
        case 174: break;
        case 81: 
          { return alloy_sym(yytext(), CompSym.UNTIL       );
          }
        case 175: break;
        case 82: 
          { return alloy_sym(yytext(), CompSym.ASSERT      );
          }
        case 176: break;
        case 83: 
          { return alloy_sym(yytext(), CompSym.ALWAYS      );
          }
        case 177: break;
        case 84: 
          { return alloy_sym(yytext(), CompSym.EXPECT      );
          }
        case 178: break;
        case 85: 
          { return alloy_sym(yytext(), CompSym.MODULE      );
          }
        case 179: break;
        case 86: 
          { return alloy_sym(yytext(), CompSym.STRING      );
          }
        case 180: break;
        case 87: 
          { return alloy_sym(yytext(), CompSym.RELEASE     );
          }
        case 181: break;
        case 88: 
          { return alloy_sym(yytext(), CompSym.EXACTLY     );
          }
        case 182: break;
        case 89: 
          { return alloy_sym(yytext(), CompSym.EXTENDS     );
          }
        case 183: break;
        case 90: 
          { return alloy_sym(yytext(), CompSym.PRIVATE     );
          }
        case 184: break;
        case 91: 
          { return alloy_sym(yytext(), CompSym.ABSTRACT    );
          }
        case 185: break;
        case 92: 
          { return alloy_sym(yytext(), CompSym.PREVIOUS    );
          }
        case 186: break;
        case 93: 
          { return alloy_sym(yytext(), CompSym.EVENTUALLY  );
          }
        case 187: break;
        case 94: 
          { return alloy_sym(yytext(), CompSym.HISTORICALLY);
          }
        case 188: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return new Symbol(CompSym.EOF, alloy_here(" "), alloy_here(" "));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
